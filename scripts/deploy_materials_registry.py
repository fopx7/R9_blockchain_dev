#!/usr/bin/env python3
"""
Script de d√©ploiement du contrat MaterialsRegistry pour le projet R9
scripts/deploy_materials_registry.py
"""

from brownie import MaterialsRegistry, accounts, network, config
from web3 import Web3
import time

def deploy_materials_registry():
    """D√©ploie le contrat MaterialsRegistry sur Ganache"""
    
    print("üöÄ D√âPLOIEMENT MATERIALSREGISTRY R9")
    print("="*50)
    
    # V√©rification du r√©seau
    if network.show_active() not in ['development', 'ganache-local']:
        print(f"‚ö†Ô∏è R√©seau actuel: {network.show_active()}")
        print("üí° Recommand√©: development ou ganache-local")
        return None
    
    # S√©lection du compte d√©ployeur
    deployer = accounts[0]
    print(f"üë§ Compte d√©ployeur: {deployer.address}")
    print(f"üí∞ Balance: {deployer.balance() / 1e18:.4f} ETH")
    
    try:
        print("\nüìã Compilation du contrat...")
        
        # D√©ploiement
        print("üöÄ D√©ploiement en cours...")
        start_time = time.time()
        
        contract = MaterialsRegistry.deploy(
            {'from': deployer, 'gas_price': Web3.toWei(20, 'gwei')}
        )
        
        deploy_time = time.time() - start_time
        
        print(f"‚úÖ Contrat d√©ploy√© avec succ√®s!")
        print(f"üìç Adresse: {contract.address}")
        print(f"‚è±Ô∏è  Temps de d√©ploiement: {deploy_time:.2f}s")
        print(f"‚õΩ Gas utilis√©: {contract.tx.gas_used:,}")
        print(f"üí∏ Co√ªt: {Web3.fromWei(contract.tx.gas_used * contract.tx.gas_price, 'ether'):.6f} ETH")
        
        # V√©rification du d√©ploiement
        print(f"\nüîç V√©rification:")
        print(f"   Nombre d'objets: {contract.nombreObjets()}")
        print(f"   Nombre de maquettes: {contract.nombreMaquettes()}")
        print(f"   Admin: {contract.hasRole(contract.DEFAULT_ADMIN_ROLE(), deployer.address)}")
        
        # Configuration des r√¥les pour les tests
        print(f"\n‚öôÔ∏è Configuration des r√¥les de test...")
        
        # Ajout d'autres comptes pour tester les diff√©rents r√¥les
        if len(accounts) >= 5:
            roles_config = [
                (contract.DEPOSEUR_ROLE(), accounts[1], "DEPOSEUR"),
                (contract.COLLECTEUR_ROLE(), accounts[2], "COLLECTEUR"), 
                (contract.VERIFICATEUR_ROLE(), accounts[3], "VERIFICATEUR"),
                (contract.MODIFICATEUR_ROLE(), accounts[4], "MODIFICATEUR")
            ]
            
            for role, account, nom in roles_config:
                tx = contract.attribuerRole(role, account.address, {'from': deployer})
                print(f"   ‚úÖ {nom}: {account.address}")
        
        print(f"\nüéâ D√âPLOIEMENT TERMIN√â!")
        print(f"üîó Contrat pr√™t pour l'int√©gration avec l'extracteur IFC")
        
        return contract
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©ploiement: {e}")
        return None

def test_contract_basic(contract):
    """Test basique du contrat d√©ploy√©"""
    
    print("\nüß™ TESTS BASIQUES")
    print("="*30)
    
    try:
        deployer = accounts[0]
        
        # Test 1: V√©rification des r√¥les
        print("1Ô∏è‚É£ Test des r√¥les:")
        has_admin = contract.hasRole(contract.DEFAULT_ADMIN_ROLE(), deployer.address)
        has_deposeur = contract.hasRole(contract.DEPOSEUR_ROLE(), deployer.address)
        print(f"   Admin: {'‚úÖ' if has_admin else '‚ùå'}")
        print(f"   D√©poseur: {'‚úÖ' if has_deposeur else '‚ùå'}")
        
        # Test 2: Test d'un d√©p√¥t de maquette
        print("\n2Ô∏è‚É£ Test d√©p√¥t maquette:")
        tx = contract.deposerMaquette(
            "Maquette Test",           # nom_maquette
            123456789012,              # id_maquette (12 chiffres)
            "Architecte Test",         # nom_architecte
            "48.8566, 2.3522",        # coordonnees_geographiques
            "Test",                    # programme
            int(time.time()),          # date_livraison
            "QmTestMaquetteIFC123",    # cid_maquette_ifc
            "QmTestMaquetteJSON456",   # cid_maquette_json
            {'from': deployer}
        )
        
        print(f"   ‚úÖ Maquette d√©pos√©e - TX: {tx.txid}")
        print(f"   üìä Nombre de maquettes: {contract.nombreMaquettes()}")
        
        # Test 3: Test d'un d√©p√¥t d'objet
        print("\n3Ô∏è‚É£ Test d√©p√¥t objet:")
        tx = contract.deposerObjet(
            "Poutre IPE Test",         # nom
            1234567891234567,          # id (16 chiffres)
            123456789012,              # id_maquette
            5000,                      # longueur_mm
            "S355",                    # caracteristique_materiau
            "acier",                   # materiau
            0,                         # statut_usage (NEUF)
            int(time.time()) - 86400,  # date_fabrication (hier)
            int(time.time()),          # date_mise_en_service (aujourd'hui)
            0,                         # date_reemploi (non applicable)
            25000,                     # empreinte_carbone (grammes CO2)
            "QmTestObjetIFC789",       # cid_ipfs
            "QmTestObjetJSON012",      # cid_metadonnees
            {'from': deployer}
        )
        
        print(f"   ‚úÖ Objet d√©pos√© - TX: {tx.txid}")
        print(f"   üìä Nombre d'objets: {contract.nombreObjets()}")
        
        # Test 4: Test de recherche
        print("\n4Ô∏è‚É£ Test recherche:")
        objets_acier = contract.rechercherParMateriau("acier", {'from': deployer})
        print(f"   üîç Objets en acier trouv√©s: {len(objets_acier)}")
        
        print(f"\n‚úÖ TOUS LES TESTS R√âUSSIS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans les tests: {e}")
        return False

def main():
    """Fonction principale"""
    
    # D√©ploiement
    contract = deploy_materials_registry()
    
    if contract:
        # Tests basiques
        test_contract_basic(contract)
        
        # Sauvegarde de l'adresse pour l'int√©gration
        print(f"\nüìù INFORMATIONS POUR L'INT√âGRATION:")
        print(f"   Adresse du contrat: {contract.address}")
        print(f"   R√©seau: {network.show_active()}")
        print(f"   Pr√™t pour l'extracteur IFC!")
        
        return contract
    else:
        print("‚ùå D√©ploiement √©chou√©")
        return None

if __name__ == "__main__":
    main()