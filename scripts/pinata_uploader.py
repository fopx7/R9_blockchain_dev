#!/usr/bin/env python3
"""
Script d'upload Pinata IPFS pour R9
Upload des fichiers IFC et JSON vers IPFS via l'API Pinata
Compatible avec Brownie Framework
Leopold MALKIT SINGH
"""

import os
import requests
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dotenv import load_dotenv
import time
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PinataUploader:
    """Gestionnaire d'upload vers IPFS via l'API Pinata"""
    
    def __init__(self):
        # Chargement des variables d'environnement
        load_dotenv()
        
        self.api_key = os.getenv('PINATA_API_KEY')
        self.secret_key = os.getenv('PINATA_SECRET_KEY')
        
        # URLs de l'API Pinata
        self.base_url = "https://api.pinata.cloud"
        self.pin_file_url = f"{self.base_url}/pinning/pinFileToIPFS"
        self.pin_json_url = f"{self.base_url}/pinning/pinJSONToIPFS"
        self.test_url = f"{self.base_url}/data/testAuthentication"
        
        # Headers d'authentification
        self.headers = {
            'pinata_api_key': self.api_key,
            'pinata_secret_api_key': self.secret_key
        }
        
        # Validation des cl√©s
        self._valider_configuration()
    
    def _valider_configuration(self):
        """Valide la configuration des cl√©s Pinata"""
        if not self.api_key or self.api_key == "votre_cle_api_pinata":
            raise ValueError("‚ùå PINATA_API_KEY non configur√©e dans le fichier .env")
        
        if not self.secret_key or self.secret_key == "votre_cle_secrete_pinata":
            raise ValueError("‚ùå PINATA_SECRET_KEY non configur√©e dans le fichier .env")
        
        logger.info("‚úÖ Cl√©s Pinata charg√©es depuis .env")
    
    def tester_connexion(self) -> bool:
        """Teste la connexion √† l'API Pinata"""
        try:
            logger.info("üîç Test de la connexion Pinata...")
            
            response = requests.get(self.test_url, headers=self.headers)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Connexion Pinata r√©ussie! Message: {result.get('message', 'OK')}")
                return True
            else:
                logger.error(f"‚ùå √âchec connexion Pinata. Status: {response.status_code}")
                logger.error(f"R√©ponse: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test de connexion: {e}")
            return False
    
    def upload_fichier(self, chemin_fichier: str, metadata: Optional[Dict] = None) -> Optional[str]:
        """
        Upload un fichier vers IPFS via Pinata
        
        Args:
            chemin_fichier: Chemin vers le fichier √† uploader
            metadata: M√©tadonn√©es optionnelles pour le fichier
            
        Returns:
            CID IPFS du fichier upload√© ou None en cas d'erreur
        """
        try:
            fichier_path = Path(chemin_fichier)
            
            if not fichier_path.exists():
                logger.error(f"‚ùå Fichier non trouv√©: {chemin_fichier}")
                return None
            
            logger.info(f"üì§ Upload de {fichier_path.name} vers IPFS...")
            
            # Pr√©paration du fichier
            with open(fichier_path, 'rb') as fichier:
                files = {
                    'file': (fichier_path.name, fichier, 'application/octet-stream')
                }
                
                # M√©tadonn√©es Pinata
                pinata_metadata = {
                    'name': fichier_path.name,
                    'keyvalues': metadata or {}
                }
                
                # Options Pinata
                pinata_options = {
                    'cidVersion': 1,
                    'wrapWithDirectory': False
                }
                
                data = {
                    'pinataMetadata': json.dumps(pinata_metadata),
                    'pinataOptions': json.dumps(pinata_options)
                }
                
                # Envoi de la requ√™te
                response = requests.post(
                    self.pin_file_url,
                    files=files,
                    data=data,
                    headers=self.headers
                )
            
            if response.status_code == 200:
                result = response.json()
                cid = result['IpfsHash']
                taille = result['PinSize']
                
                logger.info(f"‚úÖ Upload r√©ussi!")
                logger.info(f"   CID: {cid}")
                logger.info(f"   Taille: {taille} bytes")
                logger.info(f"   URL: https://gateway.pinata.cloud/ipfs/{cid}")
                
                return cid
            else:
                logger.error(f"‚ùå √âchec upload. Status: {response.status_code}")
                logger.error(f"R√©ponse: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'upload: {e}")
            return None
    
    def upload_json(self, data_json: Dict, nom_fichier: str, metadata: Optional[Dict] = None) -> Optional[str]:
        """
        Upload des donn√©es JSON vers IPFS via Pinata
        
        Args:
            data_json: Donn√©es JSON √† uploader
            nom_fichier: Nom pour identifier le fichier
            metadata: M√©tadonn√©es optionnelles
            
        Returns:
            CID IPFS des donn√©es JSON ou None en cas d'erreur
        """
        try:
            logger.info(f"üì§ Upload JSON '{nom_fichier}' vers IPFS...")
            
            # Pr√©paration des m√©tadonn√©es
            pinata_metadata = {
                'name': nom_fichier,
                'keyvalues': metadata or {}
            }
            
            # Options Pinata
            pinata_options = {
                'cidVersion': 1
            }
            
            # Donn√©es √† envoyer
            payload = {
                'pinataContent': data_json,
                'pinataMetadata': pinata_metadata,
                'pinataOptions': pinata_options
            }
            
            # Envoi de la requ√™te
            response = requests.post(
                self.pin_json_url,
                json=payload,
                headers={**self.headers, 'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                cid = result['IpfsHash']
                taille = result['PinSize']
                
                logger.info(f"‚úÖ Upload JSON r√©ussi!")
                logger.info(f"   CID: {cid}")
                logger.info(f"   Taille: {taille} bytes")
                logger.info(f"   URL: https://gateway.pinata.cloud/ipfs/{cid}")
                
                return cid
            else:
                logger.error(f"‚ùå √âchec upload JSON. Status: {response.status_code}")
                logger.error(f"R√©ponse: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'upload JSON: {e}")
            return None
    
    def upload_dossier_r9(self, dossier_extraction: str) -> Dict[str, List[str]]:
        """
        Upload complet d'un dossier d'extraction R9 vers IPFS
        
        Args:
            dossier_extraction: Chemin vers le dossier d'extraction R9
            
        Returns:
            Dictionnaire avec les CID de tous les fichiers upload√©s
        """
        dossier = Path(dossier_extraction)
        
        if not dossier.exists():
            logger.error(f"‚ùå Dossier d'extraction non trouv√©: {dossier_extraction}")
            return {}
        
        resultats = {
            'objets_ifc_cids': [],
            'objets_json_cids': [],
            'maquette_ifc_cid': None,
            'maquette_json_cid': None,
            'erreurs': []
        }
        
        logger.info(f"üöÄ Upload complet du dossier R9: {dossier.name}")
        
        # 1. Upload des objets IFC individuels
        dossier_objets_ifc = dossier / "objets_ifc"
        if dossier_objets_ifc.exists():
            fichiers_ifc = list(dossier_objets_ifc.glob("*.ifc"))
            logger.info(f"üìÅ Upload de {len(fichiers_ifc)} objets IFC...")
            
            for fichier_ifc in fichiers_ifc:
                metadata = {
                    'type': 'objet_ifc',
                    'projet': 'R9_blockchain_bim'
                }
                
                cid = self.upload_fichier(str(fichier_ifc), metadata)
                if cid:
                    resultats['objets_ifc_cids'].append({
                        'fichier': fichier_ifc.name,
                        'cid': cid
                    })
                else:
                    resultats['erreurs'].append(f"√âchec upload: {fichier_ifc.name}")
                
                # Pause entre uploads pour √©viter les limites de taux
                time.sleep(1)
        
        # 2. Upload des JSON d'objets
        dossier_objets_json = dossier / "objets_json"
        if dossier_objets_json.exists():
            fichiers_json = list(dossier_objets_json.glob("*.json"))
            logger.info(f"üìÅ Upload de {len(fichiers_json)} m√©tadonn√©es JSON...")
            
            for fichier_json in fichiers_json:
                try:
                    with open(fichier_json, 'r', encoding='utf-8') as f:
                        data_json = json.load(f)
                    
                    metadata = {
                        'type': 'metadata_objet',
                        'projet': 'R9_blockchain_bim'
                    }
                    
                    cid = self.upload_json(data_json, fichier_json.name, metadata)
                    if cid:
                        resultats['objets_json_cids'].append({
                            'fichier': fichier_json.name,
                            'cid': cid
                        })
                    else:
                        resultats['erreurs'].append(f"√âchec upload JSON: {fichier_json.name}")
                        
                except Exception as e:
                    resultats['erreurs'].append(f"Erreur lecture {fichier_json.name}: {e}")
                
                time.sleep(0.5)
        
        # 3. Upload de la maquette IFC compl√®te
        fichiers_maquette_ifc = list(dossier.glob("maquette_*.ifc"))
        if fichiers_maquette_ifc:
            maquette_ifc = fichiers_maquette_ifc[0]
            logger.info(f"üìÅ Upload de la maquette compl√®te: {maquette_ifc.name}")
            
            metadata = {
                'type': 'maquette_complete',
                'projet': 'R9_blockchain_bim'
            }
            
            cid = self.upload_fichier(str(maquette_ifc), metadata)
            if cid:
                resultats['maquette_ifc_cid'] = cid
            else:
                resultats['erreurs'].append(f"√âchec upload maquette: {maquette_ifc.name}")
        
        # 4. Upload des m√©tadonn√©es de maquette
        fichiers_maquette_json = list(dossier.glob("maquette_*.json"))
        if fichiers_maquette_json:
            maquette_json = fichiers_maquette_json[0]
            logger.info(f"üìÅ Upload m√©tadonn√©es maquette: {maquette_json.name}")
            
            try:
                with open(maquette_json, 'r', encoding='utf-8') as f:
                    data_maquette = json.load(f)
                
                metadata = {
                    'type': 'metadata_maquette',
                    'projet': 'R9_blockchain_bim'
                }
                
                cid = self.upload_json(data_maquette, maquette_json.name, metadata)
                if cid:
                    resultats['maquette_json_cid'] = cid
                else:
                    resultats['erreurs'].append(f"√âchec upload m√©tadonn√©es maquette")
                    
            except Exception as e:
                resultats['erreurs'].append(f"Erreur lecture m√©tadonn√©es maquette: {e}")
        
        # R√©sum√©
        logger.info("üìä R√âSUM√â UPLOAD PINATA:")
        logger.info(f"  ‚úÖ Objets IFC: {len(resultats['objets_ifc_cids'])}")
        logger.info(f"  ‚úÖ M√©tadonn√©es JSON: {len(resultats['objets_json_cids'])}")
        logger.info(f"  ‚úÖ Maquette IFC: {'Oui' if resultats['maquette_ifc_cid'] else 'Non'}")
        logger.info(f"  ‚úÖ Maquette JSON: {'Oui' if resultats['maquette_json_cid'] else 'Non'}")
        
        if resultats['erreurs']:
            logger.warning(f"  ‚ö†Ô∏è  Erreurs: {len(resultats['erreurs'])}")
            for erreur in resultats['erreurs']:
                logger.warning(f"    - {erreur}")
        
        return resultats


def test_pinata_connection():
    """Test simple de la connexion Pinata"""
    try:
        uploader = PinataUploader()
        return uploader.tester_connexion()
    except Exception as e:
        print(f"‚ùå Erreur test Pinata: {e}")
        return False


def upload_fichier_simple(chemin_fichier: str) -> Optional[str]:
    """Upload simple d'un fichier vers Pinata"""
    try:
        uploader = PinataUploader()
        return uploader.upload_fichier(chemin_fichier)
    except Exception as e:
        logger.error(f"‚ùå Erreur upload: {e}")
        return None


def main():
    """Fonction de test et d√©monstration"""
    print("üîó TEST DE CONNEXION PINATA POUR R9")
    print("="*50)
    
    # Test de connexion
    if test_pinata_connection():
        print("‚úÖ Pinata configur√© correctement!")
        
        # Test d'upload d'un fichier exemple
        fichier_test = input("\nChemin d'un fichier test (optionnel): ").strip()
        if fichier_test and Path(fichier_test).exists():
            cid = upload_fichier_simple(fichier_test)
            if cid:
                print(f"üöÄ Fichier upload√© avec succ√®s!")
                print(f"CID: {cid}")
                print(f"URL: https://gateway.pinata.cloud/ipfs/{cid}")
    else:
        print("‚ùå Probl√®me de configuration Pinata")
        print("\nüîß V√©rifiez vos cl√©s dans le fichier .env:")
        print("   PINATA_API_KEY=votre_vraie_cle")
        print("   PINATA_SECRET_KEY=votre_vraie_cle_secrete")


if __name__ == "__main__":
    main()